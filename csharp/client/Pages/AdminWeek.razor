@page "/admin-week"
@inject HttpClient httpClient
@inject AuthenticationStateProvider authProvider
@inject IJSRuntime Js
@using System.Globalization
@using System.Text.Json
@using BlazorApp1.Components
@using BlazorApp1.Providers
@using DefaultNamespace
@using Google.Protobuf.WellKnownTypes
@using Via.Dk

<AuthorizeView Roles="Admin">
    <dialog id="successDialog" class="rounded-lg p-6 bg-white shadow-lg w-1/3">
        <div class="flex flex-col space-y-4">
            <div class="flex justify-between items-center">
                <h3 class="text-xl font-bold">Success</h3>
            </div>
            <p>Successfully edit week's recipes!</p>
        </div>
    </dialog>
    <h1 class="text-3xl font-bold mb-6 text-gray-800">Weeks</h1>
    <div class="mb-4">
        <h2 class="text-lg font-semibold text-gray-700">
            Selected Recipes: @string.Join(", ", SelectedRecipeIds)
        </h2>
    </div>
    <h3>
        @if (HasWeekPassed)
        {
            <span class="text-red-500">The selected week has passed</span>
        }
    </h3>
    <div class="flex gap-3">
        <input type="week"
               class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block p-2.5"
               value="@CurrentWeek"
               onchange="@GetAdminWeek"
        />
        <button 
            disabled="@HasWeekPassed"
            onclick="@OnSubmit"
                class="text-white font-medium py-2 px-4 rounded-lg @(HasWeekPassed ? "cursor-not-allowed bg-gray-400 text-black" : "bg-blue-600 hover:bg-blue-700")">
            Lock week
        </button>
    </div>
    <div class="grid grid-cols-3 gap-4">
        @foreach (var recipe in recipes)
        {
            <RecipeCard
                Id="recipe.Id"
                ImageUrl="@recipe.ImageLink"
                Title="@recipe.Name"
                Type="@recipe.Type"
                Ingredients="@recipe.Ingredients.Select(i => i.Name).ToList()"
                Description="@recipe.Description"
                Selectable="true"
                OnSelected="OnRecipeSelected"
                IsSelected="@SelectedRecipeIds.Contains(recipe.Id.ToString())"
                Disabled="@HasWeekPassed"
            />
        }
    </div>
</AuthorizeView>


@code {

    public string? CurrentWeek { get; set; }

    private bool _hasWeekPassed;

    public bool HasWeekPassed
    {
        get
        {
            if (CurrentWeek == null) return false;
            var yearWeek = CurrentWeek.Split("-W");
            var startDate = ISOWeek.ToDateTime(int.Parse(yearWeek[0]), int.Parse(yearWeek[1]), DayOfWeek.Monday);
            return startDate < DateTime.Now;
        }
        set { this._hasWeekPassed = value; }
    }

    private List<string> SelectedRecipeIds { get; set; } = new();
    List<Via.Dk.Recipe> recipes = new List<Via.Dk.Recipe>();
    NormalizedAdminWeek? CurrentAdminWeek = null;

    private async Task<IEnumerable<Via.Dk.Recipe>?> GetRecipes()
    {
        return await httpClient.GetFromJsonAsync<IEnumerable<Via.Dk.Recipe>>("api/Recipe/allRecipes");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var newRecipes = await GetRecipes();
            recipes.AddRange(newRecipes);
            StateHasChanged();
        }
    }
   
    private async void SuccessMessage()
    {
        await Js.InvokeVoidAsync("showDialog", "successDialog");
        await Task.Delay(2000);
        await Js.InvokeVoidAsync("hideDialog", "successDialog");
    }

    private async Task GetAdminWeek(ChangeEventArgs e)
    {
        Console.WriteLine("Change");
        CurrentWeek = e.Value?.ToString();
        var yearWeek = CurrentWeek.Split("-W");
        var startDate = ISOWeek.ToDateTime(int.Parse(yearWeek[0]), int.Parse(yearWeek[1]), DayOfWeek.Monday);
        var endDate = ISOWeek.ToDateTime(int.Parse(yearWeek[0]), int.Parse(yearWeek[1]), DayOfWeek.Sunday);
        var adminWeekSelection = new RetrieveAdminWeekSelectionRequest()
        {
            WeekStartDate = Timestamp.FromDateTime(startDate.ToUniversalTime()),
            WeekEndDate = Timestamp.FromDateTime(endDate.ToUniversalTime())
        };
        try
        {
            var res = await httpClient.GetFromJsonAsync<List<NormalizedAdminWeek>>("api/AdminWeek?weekStartDate=" + startDate.ToUniversalTime().ToString("o") + "&weekEndDate=" + endDate.ToUniversalTime().ToString("o"), new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            if (res != null)
                CurrentAdminWeek = new NormalizedAdminWeek
                {
                    Id = res[0].Id,
                    Recipes = res[0].Recipes,
                    WeekStartDate = res[0].WeekStartDate,
                    WeekEndDate = res[0].WeekEndDate
                };
            SelectedRecipeIds = CurrentAdminWeek?.Recipes.Select(r => r.Id.ToString()).ToList() ?? new List<string>();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("here");
            SelectedRecipeIds = new List<string>();
            CurrentAdminWeek = null;
            Console.WriteLine(ex);
        }
    }


    public async Task OnSubmit()
    {
        var yearWeek = CurrentWeek.Split("-W");
        var startDate = ISOWeek.ToDateTime(int.Parse(yearWeek[0]), int.Parse(yearWeek[1]), DayOfWeek.Monday);
        var endDate = ISOWeek.ToDateTime(int.Parse(yearWeek[0]), int.Parse(yearWeek[1]), DayOfWeek.Sunday);
        var adminWeekSelection = new CreateAdminWeekSelectionRequest
        {
            WeekStartDate = Timestamp.FromDateTime(startDate.ToUniversalTime()),
            WeekEndDate = Timestamp.FromDateTime(endDate.ToUniversalTime())
        };
        adminWeekSelection.RecipeIds.AddRange(SelectedRecipeIds.Select(int.Parse));
        adminWeekSelection.CreatedById = authProvider.GetAuthenticationStateAsync().Id;
        Console.WriteLine(CurrentAdminWeek);
        if (CurrentAdminWeek == null)
        {
            var res = await httpClient.PostAsJsonAsync("api/AdminWeek", adminWeekSelection);
            SuccessMessage();
            return;
        }

        var adminWeekSelectionChange = new UpdateAdminWeekSelectionRequest
        {
            AdminWeekId = CurrentAdminWeek.Id,
            WeekStartDate = Timestamp.FromDateTime(startDate.ToUniversalTime()),
            WeekEndDate = Timestamp.FromDateTime(endDate.ToUniversalTime())
        };
        adminWeekSelectionChange.RecipeIds.AddRange(SelectedRecipeIds.Select(int.Parse));
        adminWeekSelectionChange.CreatedById = authProvider.GetAuthenticationStateAsync().Id;
        var res2 = await httpClient.PutAsJsonAsync("api/AdminWeek", adminWeekSelectionChange);
        SuccessMessage();
    }

    private void OnRecipeSelected(string id)
    {
        if (SelectedRecipeIds.Contains(id))
        {
            // If the recipe is already selected, remove it
            SelectedRecipeIds.Remove(id);
            return;
        }

        SelectedRecipeIds.Add(id);
    }

}