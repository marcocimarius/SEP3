@page "/recipes"
@using BlazorApp1.Components
@inject IJSRuntime Js
@attribute [Authorize]

<pagetitle class="text-2xl font-bold">Recipes</pagetitle>

<div class="flex gap-4 items-end pt-3 pb-3">
    <div class="relative w-1/5">
        <label for="search" class="block mb-2 text-sm font-medium text-gray-900">Search</label>
        <input type="text" id="search" @bind="SearchText"
               class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 pr-10"
               placeholder="Search recipes..." />
        <button @onclick="Search"
                class="absolute inset-y-0 right-0 rounded-r items-center pt-6 pr-2">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 30" width="20px" height="20px"><path d="M 13 3 C 7.4889971 3 3 7.4889971 3 13 C 3 18.511003 7.4889971 23 13 23 C 15.396508 23 17.597385 22.148986 19.322266 20.736328 L 25.292969 26.707031 A 1.0001 1.0001 0 1 0 26.707031 25.292969 L 20.736328 19.322266 C 22.148986 17.597385 23 15.396508 23 13 C 23 7.4889971 18.511003 3 13 3 z M 13 5 C 17.430123 5 21 8.5698774 21 13 C 21 17.430123 17.430123 21 13 21 C 8.5698774 21 5 17.430123 5 13 C 5 8.5698774 8.5698774 5 13 5 z"/></svg>
        </button>
    </div>
    <div class="w-1/5">
        <label for="type" class="block mb-2 text-sm font-medium text-gray-900">Type</label>
        <select id="type" @bind="SelectedType"
                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
            <option value="">Select type</option>
            @foreach (var type in Types)
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
    <div class="w-1/5">
        <label for="allergen" class="block mb-2 text-sm font-medium text-gray-900">Allergen</label>
        <select id="allergen" @bind="SelectedAllergen"
                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
            <option value="">Select allergen</option>
            @foreach (var allergen in Allergens)
            {
                <option value="@allergen">@allergen</option>
            }
        </select>
    </div>
    <div class="flex-grow"></div>
    <div class="flex space-x-4 items-end">
        <button @onclick="NewIngredientDialog"
                class="bg-green-600 font-normal text-sm hover:bg-green-700 text-white py-2 px-4 rounded">
            New Ingredient
        </button>
        <button @onclick="NewRecipeDialog"
                class="bg-green-600 font-normal text-sm hover:bg-green-700 text-white py-2 px-4 rounded">
            New Recipe
        </button>
    </div>
</div>

<!-- Ingredient Dialog -->
<dialog id="newIngredientDialog" class="rounded-lg p-6 bg-white shadow-lg w-1/3">
    <form method="dialog" class="flex flex-col space-y-4" onsubmit="return false;">
        <div class="flex justify-between items-center">
            <h3 class="text-xl font-bold">New Ingredient</h3>
            <button type="button" @onclick="CancelIngredient" class="text-gray-500 hover:text-gray-700">
                &times;
            </button>
        </div>
        <div>
            <label for="ingredientName" class="block mb-2 text-sm font-medium text-gray-900">Name *</label>
            <input type="text" id="ingredientName" name="ingredientName" @bind="IngredientName"
                   class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 @(FieldErrors["ingredientName"] ? "border-red-500" : "")"
                   placeholder="Enter ingredient name" />
        </div>
        <div>
            <label for="ingredientType" class="block mb-2 text-sm font-medium text-gray-900">Type *</label>
            <select id="ingredientType" name="ingredientType" @bind="IngredientType"
                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 @(FieldErrors["ingredientType"] ? "border-red-500" : "")">
                <option value="">Select type</option>
                @foreach (var type in Types)
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>
        <div>
            <label for="ingredientCalories" class="block mb-2 text-sm font-medium text-gray-900">Calories *</label>
            <input type="number" id="ingredientCalories" name="ingredientCalories" @bind="IngredientCalories"
                   class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 @(FieldErrors["ingredientCalories"] ? "border-red-500" : "")"
                   placeholder="Enter calories" />
        </div>
        <div class="flex items-center">
            <input type="checkbox" id="isAllergen" name="isAllergen" @bind="IsAllergen" class="mr-2" />
            <label for="isAllergen" class="text-sm font-medium text-gray-900">Is allergen?</label>
        </div>
        <div class="flex justify-end space-x-4">
            @if (IsError)
            {
                <p style="color: red; margin-right: auto; font-size: small;">Please fill in all fields.</p>
            }
            <button type="button" @onclick="AddIngredient"
                    class="bg-green-600 font-normal text-sm hover:bg-green-700 text-white py-2 px-4 rounded">
                Add
            </button>
            <button type="button" @onclick="CancelIngredient"
                    class="bg-red-600 font-normal text-sm hover:bg-red-700 text-white py-2 px-4 rounded">
                Cancel
            </button>
        </div>
    </form>
</dialog>

<!-- Recipe Dialog -->
<dialog id="newRecipeDialog" class="rounded-lg p-4 bg-white shadow-lg w-2/3 overflow-auto">
    <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold">New Recipe</h3>
        <button type="button" @onclick="CancelRecipe" class="text-gray-500 hover:text-gray-700">
            &times;
        </button>
    </div>
    <form method="dialog" class="flex space-x-6">
        <!-- Left Column -->
        <div class="w-1/2 flex flex-col space-y-4 pr-10">
            <!-- Upload Image -->
            <div class="p-6 border border-gray-300 rounded-lg">
                <label for="recipeImage" class="block mb-2 text-sm font-medium text-gray-900">Upload Image</label>
                <input type="file" id="recipeImage" @onchange="HandleImageUpload"
                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5"/>
            </div>

            <!-- Ingredients -->
            <div class="p-6 border border-gray-300 rounded-lg">
                <label for="recipeIngredients" class="block mb-2 text-sm font-medium text-gray-900">Ingredients</label>
                <div class="flex items-center space-x-2">
                    <select id="recipeIngredients" @bind="SelectedIngredient" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 mr-2 @(FieldErrors["selectedIngredient"] ? "border-red-500" : "")">
                        <option value="">Select ingredient</option>
                        @foreach (var ingredient in Ingredients)
                        {
                        <option value="@ingredient">@ingredient</option>
                        }
                    </select>
                    <button type="button" @onclick="AddIngredientToList" class="bg-green-600 font-normal text-sm hover:bg-green-700 text-white py-2 px-4 rounded">Add</button>
                </div>
                <ul class="mt-2 list-disc list-inside">
                    @foreach (var ingredient in NewRecipeIngredients)
                    {
                    <li>@ingredient</li>
                    }
                </ul>
            </div>
            <!-- Type -->
            <div class="p-6 border border-gray-300 rounded-lg">
                <label for="newRecipeType" class="block mb-2 text-sm font-medium text-gray-900">Type *</label>
                <select id="newRecipeType" @bind="NewRecipeSelectedType"
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 @(FieldErrors["recipeType"] ? "border-red-500" : "")">
                    <option value="">Select type</option>
                    @foreach (var type in Types)
                    {
                    <option value="@type">@type</option>
                    }
                </select>
            </div>

            <!-- Allergen -->
            <div class="p-6 border border-gray-300 rounded-lg">
                <label for="newRecipeAllergen" class="block mb-2 text-sm font-medium text-gray-900">Allergen</label>
                <select id="newRecipeAllergen" @bind="NewRecipeSelectedAllergen"
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 @(FieldErrors["recipeAllergen"] ? "border-red-500" : "")">
                    <option value="">Select allergen</option>
                    @foreach (var allergen in Allergens)
                    {
                    <option value="@allergen">@allergen</option>
                    }
                </select>
            </div>

        </div>

        <!-- Right Column -->
        <div class="w-1/2 flex flex-col space-y-4">
            <!-- Recipe Name -->
            <div class="p-6 border border-gray-300 rounded-lg">
                <label for="recipeName" class="block mb-2 text-sm font-medium text-gray-900">Name *</label>
                <input type="text" id="recipeName" @bind="NewRecipeName"
                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 @(FieldErrors["recipeName"] ? "border-red-500" : "")"
                       placeholder="Enter recipe name"/>
            </div>

            <!-- Recipe Description -->
            <div class="p-6 border border-gray-300 rounded-lg">
                <label for="recipeDescription" class="block mb-2 text-sm font-medium text-gray-900">Description *</label>
                <textarea id="recipeDescription" @bind="NewRecipeDescription"
                          class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 h-80 @(FieldErrors["recipeDescription"] ? "border-red-500" : "")"
                          placeholder="Enter recipe description"></textarea>
            </div>
        </div>
    </form>

    <!-- Buttons -->
    <div class="flex justify-end space-x-4 mt-4">
        <button type="button" @onclick="AddRecipe"
                class="bg-green-600 font-normal text-sm hover:bg-green-700 text-white py-2 px-4 rounded">
            Add
        </button>
        <button type="button" @onclick="CancelRecipe"
                class="bg-red-600 font-normal text-sm hover:bg-red-700 text-white py-2 px-4 rounded">
            Cancel
        </button>
    </div>
</dialog>

<!-- Error Dialog -->
<dialog id="errorDialog" class="rounded-lg p-4 bg-white shadow-lg w-1/4">
    <div class="flex flex-col space-y-4">
        <div class="flex justify-between items-center">
            <h3 class="text-xl font-bold">Error</h3>
            <button type="button" @onclick="CloseDialog" class="text-gray-500 hover:text-gray-700">
                &times;
            </button>
        </div>
        <p>@ErrorMessage</p>
        <div class="flex justify-end space-x-4">
            <button type="button" @onclick="ContinueDialog"
                    class="bg-green-600 font-normal text-sm hover:bg-green-700 text-white py-2 px-4 rounded">
                Continue
            </button>
            <button type="button" @onclick="CloseDialog"
                    class="bg-red-600 font-normal text-sm hover:bg-red-700 text-white py-2 px-4 rounded">
                Close
            </button>
        </div>
    </div>
</dialog>

<!-- Success Dialog -->
<dialog id="successDialog" class="rounded-lg p-6 bg-white shadow-lg w-1/3">
    <div class="flex flex-col space-y-4">
        <div class="flex justify-between items-center">
            <h3 class="text-xl font-bold">Success</h3>
        </div>
        <p>Successfully added!</p>
    </div>
</dialog>

<!-- Modify Recipe Dialog -->
<dialog id="modifyRecipeDialog" class="rounded-lg p-6 bg-white shadow-lg w-2/3">
    <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold pb-3">Modify Recipe</h3>
        <button type="button" @onclick="CancelModifyRecipe" class="text-gray-500 hover:text-gray-700">
            &times;
        </button>
    </div>
    <form method="dialog" class="flex space-x-6">
        <!-- Left Column -->
        <div class="w-1/2 flex flex-col space-y-4 pr-10">
            <!-- Recipe Name -->
            <div class="p-6 border border-gray-300 rounded-lg">
                <label for="recipeName" class="block mb-2 text-sm font-medium text-gray-900">Name *</label>
                <input type="text" id="recipeName" @bind="NewRecipeName"
                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5" />
            </div>

            <!-- Recipe Description -->
            <div class="p-6 border border-gray-300 rounded-lg">
                <label for="recipeDescription" class="block mb-2 text-sm font-medium text-gray-900">Description *</label>
                <textarea id="recipeDescription" @bind="NewRecipeDescription"
                          class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 h-56"></textarea>
            </div>
        </div>

        <!-- Right Column -->
        <div class="w-1/2 flex flex-col space-y-4">
            <!-- Ingredients -->
            <div class="p-6 border border-gray-300 rounded-lg">
                <label for="recipeIngredients" class="block mb-2 text-sm font-medium text-gray-900">Ingredients</label>
                <div class="flex items-center space-x-2">
                    <select id="recipeIngredients" @bind="SelectedIngredient" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5 mr-2">
                        <option value="">Select ingredient</option>
                        @foreach (var ingredient in Ingredients)
                        {
                        <option value="@ingredient">@ingredient</option>
                        }
                    </select>
                    <button type="button" @onclick="AddIngredientToList" class="bg-green-600 font-normal text-sm hover:bg-green-700 text-white py-2 px-4 rounded">Add</button>
                </div>
                <ul class="mt-2 list-disc list-inside">
                    @foreach (var ingredient in NewRecipeIngredients)
                    {
                    <li>@ingredient</li>
                    }
                </ul>
            </div>

            <!-- Type -->
            <div class="p-6 border border-gray-300 rounded-lg">
                <label for="type" class="block mb-2 text-sm font-medium text-gray-900">Type</label>
                <select id="type" @bind="ModifySelectedType"
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                    <option value="">Select type</option>
                    @foreach (var type in Types)
                    {
                    <option value="@type">@type</option>
                    }
                </select>
            </div>

            <!-- Allergen -->
            <div class="p-6 border border-gray-300 rounded-lg">
                <label for="allergen" class="block mb-2 text-sm font-medium text-gray-900">Allergen</label>
                <select id="allergen" @bind="ModifySelectedAllergen"
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2.5">
                    <option value="">Select allergen</option>
                    @foreach (var allergen in Allergens)
                    {
                    <option value="@allergen">@allergen</option>
                    }
                </select>
            </div>
        </div>
    </form>

    <!-- Buttons -->
    <div class="flex justify-end space-x-4 mt-4">
        <button type="button" @onclick="SaveModifiedRecipe"
                class="bg-green-600 font-normal text-sm hover:bg-green-700 text-white py-2 px-4 rounded">
            Save
        </button>
        <button type="button" @onclick="CancelModifyRecipe"
                class="bg-red-600 font-normal text-sm hover:bg-red-700 text-white py-2 px-4 rounded">
            Cancel
        </button>
    </div>
</dialog>

<!-- Delete Recipe Dialog -->
<dialog id="deleteRecipeDialog" class="rounded-lg p-6 bg-white shadow-lg w-1/3">
    <div class="flex flex-col space-y-4">
        <div class="flex justify-between items-center">
            <h3 class="text-xl font-bold">Delete Recipe</h3>
            <button type="button" @onclick="CancelDeleteRecipe" class="text-gray-500 hover:text-gray-700">
                &times;
            </button>
        </div>
        <p>Are you sure you want to delete this recipe?</p>
        <div class="flex justify-end space-x-4">
            <button type="button" @onclick="ConfirmDeleteRecipe"
                    class="bg-red-600 font-normal text-sm hover:bg-red-700 text-white py-2 px-4 rounded">
                Delete
            </button>
            <button type="button" @onclick="CancelDeleteRecipe"
                    class="bg-green-600 font-normal text-sm hover:bg-gray-700 text-white py-2 px-4 rounded">
                Cancel
            </button>
        </div>
    </div>
</dialog>

<div class="flex gap-4">
    @foreach (var recipe in FilteredRecipes)
    {
        <div class="flex-1 max-w-[33%]">
            <RecipeCard
                ImageUrl="assets/spaghetti-bolog.jpg"
                Title="@recipe.Title"
                Description="@recipe.Description"
                Types="@recipe.Types"
                Ingredients="@recipe.Ingredients"
                Allergens="@recipe.Allergens"
                Editable="true"
                OnSelected="OnRecipeSelected"
                Id="@recipe.Id"
            />
        </div>
    }
</div>


@code {
    // New Recipe properties and methods
    private string NewRecipeName { get; set; } = string.Empty;
    private string NewRecipeDescription { get; set; } = string.Empty;
    private List<string> NewSelectedType { get; set; } = new List<string>();
    private List<string> NewSelectedAllergen { get; set; } = new List<string>();
    private string SelectedIngredient { get; set; } = string.Empty;
    private List<string> NewRecipeIngredients { get; set; } = new List<string>();
    private bool IsRecipeDialog { get; set; } = false;

    private void AddIngredientToList()
    {
    if (!string.IsNullOrEmpty(SelectedIngredient) && !NewRecipeIngredients.Contains(SelectedIngredient))
        {
            NewRecipeIngredients.Add(SelectedIngredient);
        }
    }

    private void ValidateRecipeFields()
    {
        FieldErrors["recipeName"] = string.IsNullOrWhiteSpace(NewRecipeName);
        FieldErrors["recipeDescription"] = string.IsNullOrWhiteSpace(NewRecipeDescription);
        FieldErrors["selectedIngredient"] = !NewRecipeIngredients.Any();
        FieldErrors["recipeType"] = string.IsNullOrWhiteSpace(NewRecipeSelectedType);

        IsError = FieldErrors["recipeName"] || FieldErrors["recipeDescription"] || FieldErrors["selectedIngredient"];
    if (IsError)
        {
        ErrorMessage = "Fill out all fields.";
        }
    }

    private async Task NewRecipeDialog()
    {
        EditingRecipe = new RecipeModel();
        
        NewRecipeName = string.Empty;
        NewRecipeDescription = string.Empty;
        NewRecipeIngredients = new List<string>();
        NewSelectedType = new List<string>();
        NewSelectedAllergen = new List<string>();
        SelectedIngredient = string.Empty;
        SelectedType = string.Empty;
        SelectedAllergen = string.Empty;
        await Js.InvokeVoidAsync("showDialog", "newRecipeDialog");
    }

    private async Task HideNewRecipeDialog()
    {
        await Js.InvokeVoidAsync("hideDialog", "newRecipeDialog");
    }

    private async Task CancelRecipe()
    {
        ErrorMessage = "Canceling will discard all changes. Are you sure?";
        IsRecipeDialog = true;
        await Js.InvokeVoidAsync("showDialog", "errorDialog");
    }

    private void AddRecipe()
    {
        ValidateRecipeFields();
    if (!IsError)
    {
        HideNewRecipeDialog();
    var newRecipe = new RecipeModel
    {
        Title = NewRecipeName,
        Description = NewRecipeDescription,
        Types = !string.IsNullOrWhiteSpace(NewRecipeSelectedType) ? new List<string> { NewRecipeSelectedType } : new List<string>(),
        Ingredients = new List<string>(NewRecipeIngredients),
        Allergens = new List<string> { NewRecipeSelectedAllergen }
    };
        Recipes.Add(newRecipe);
        ResetNewRecipeDialog();
        HideNewRecipeDialog();
        SuccessMessage();
        Js.InvokeVoidAsync("console.log", $"Recipe Name: {newRecipe.Title}, Description: {newRecipe.Description}, Types: {string.Join(", ", newRecipe.Types)}, Ingredients: {string.Join(", ", newRecipe.Ingredients)}, Allergens: {string.Join(", ", newRecipe.Allergens)}");
    }
    else
        {
        ErrorMessage = "Please fill in all required fields.";
        }
    }

    private void Search()
    {
        StateHasChanged();
    }

    private List<RecipeModel> FilteredRecipes => Recipes
        .Where(r => (string.IsNullOrEmpty(SearchText) || r.Title.Contains(SearchText, StringComparison.OrdinalIgnoreCase) || r.Description.Contains(SearchText, StringComparison.OrdinalIgnoreCase) || r.Types.Any(t => t.Contains(SearchText, StringComparison.OrdinalIgnoreCase)) || r.Ingredients.Any(i => i.Contains(SearchText, StringComparison.OrdinalIgnoreCase)))
        && (string.IsNullOrEmpty(SelectedType) || r.Types.Contains(SelectedType))
        && (string.IsNullOrEmpty(SelectedAllergen) || !r.Allergens.Contains(SelectedAllergen)))
        .ToList();

    private class RecipeModel
    {
        private static int _nextId = 1;

        public int Id { get; set; } = _nextId++;
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public List<string> Types { get; set; } = new List<string>();
        public List<string> Ingredients { get; set; } = new List<string>();
        public List<string> Allergens { get; set; } = new List<string>();
    }

    private List<RecipeModel> Recipes = new List<RecipeModel>
    {
        new RecipeModel { Id = 1, Title = "Spaghetti bolognese", Description = "Often we eat the vegetables while the meat sauce simmers in the pan. Then I peel a large bowl of carrots and cut bell pepper, broccoli florets, cucumbers and tomato - so it becomes a snack, so that the vegetable depot is already well filled when dinner is served. If you want, you can also cleverly sneak a grated carrot or squash into this meat sauce, no one will notice anyway.", Types = new List<string> { "Meateatrian" }, Ingredients = new List<string> { "Pasta", "Minced Meat" }, Allergens = new List<string> { "Gluten" } },
        new RecipeModel { Id = 2, Title = "Spaghetti carbonara", Description = "Often we eat the vegetables while the meat sauce simmers in the pan. Then I peel a large bowl of carrots and cut bell pepper, broccoli florets, cucumbers and tomato - so it becomes a snack, so that the vegetable depot is already well filled when dinner is served. If you want, you can also cleverly sneak a grated carrot or squash into this meat sauce, no one will notice anyway.", Types = new List<string> { "Meateatrian" }, Ingredients = new List<string> { "Pasta", "Parmezan" }, Allergens = new List<string> { "Dairy" } },
        new RecipeModel { Id = 3, Title = "Spaghetti bla bla bla", Description = "Often we eat the vegetables while the meat sauce simmers in the pan. Then I peel a large bowl of carrots and cut bell pepper, broccoli florets, cucumbers and tomato - so it becomes a snack, so that the vegetable depot is already well filled when dinner is served. If you want, you can also cleverly sneak a grated carrot or squash into this meat sauce, no one will notice anyway.", Types = new List<string> { "Vegetarian" }, Ingredients = new List<string> { "Pasta", "Tomato" }, Allergens = new List<string> { "Peanuts" } },
    };

    // Ingredient properties and methods
    private string IngredientName { get; set; } = string.Empty;
    private string IngredientType { get; set; } = string.Empty;
    private int IngredientCalories { get; set; }
    private bool IsAllergen { get; set; }

    private void ValidateIngredientFields()
    {
        FieldErrors["ingredientName"] = string.IsNullOrWhiteSpace(IngredientName);
        FieldErrors["ingredientType"] = string.IsNullOrWhiteSpace(IngredientType);
        FieldErrors["ingredientCalories"] = IngredientCalories <= 0;

        IsError = FieldErrors["ingredientName"] || FieldErrors["ingredientType"] || FieldErrors["ingredientCalories"];
    }

    private async Task NewIngredientDialog()
    {
        await Js.InvokeVoidAsync("showDialog", "newIngredientDialog");
    }

    private async Task HideNewIngredientDialog()
    {
        await Js.InvokeVoidAsync("hideDialog", "newIngredientDialog");
    }

    private async Task CancelIngredient()
    {
        ErrorMessage = "Canceling will discard all changes. Are you sure?";
        IsRecipeDialog = false;
        await Js.InvokeVoidAsync("showDialog", "errorDialog");
    }

    private async void AddIngredient()
    {
        ValidateIngredientFields();
        if (!IsError)
    {
        await HideNewIngredientDialog();
        await Js.InvokeVoidAsync("console.log", $"Ingredient Name: {IngredientName}, Type: {IngredientType}, Calories: {IngredientCalories}, Is Allergen: {IsAllergen}");
        SuccessMessage();
    }
    else
        {
            ErrorMessage = "Please fill in all required fields.";
        }
    }

    // Image upload methods
    private string UploadedImageBase64 { get; set; } = string.Empty;

    private async void HandleImageUpload(ChangeEventArgs e)
    {
        if (e.Value is not null)
    {
        var fileInput = (Microsoft.AspNetCore.Components.Forms.IBrowserFile)e.Value;

        if (!fileInput.ContentType.StartsWith("image/"))
    {
        ErrorMessage = "Only image files are allowed.";
        IsError = true;
        return;
        }

        const long maxFileSize = 5 * 1024 * 1024;

    if (fileInput.Size > maxFileSize)
        {
        ErrorMessage = "File size exceeds the maximum allowed limit of 5 MB.";
        IsError = true;
        return;
        }

        using var stream = fileInput.OpenReadStream(maxFileSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        var imageBytes = memoryStream.ToArray();
        UploadedImageBase64 = Convert.ToBase64String(imageBytes);

        IsError = false;
        StateHasChanged();
        }
    }

    // Error dialog methods
    private bool IsError { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;

    private async Task ContinueDialog()
    {
        await Js.InvokeVoidAsync("hideDialog", "errorDialog");
    if (IsRecipeDialog)
        {
            await Js.InvokeVoidAsync("showDialog", "newRecipeDialog");
        }
    else
        {
            await Js.InvokeVoidAsync("showDialog", "newIngredientDialog");
        }
    }

    private async Task CloseDialog()
    {
        await Js.InvokeVoidAsync("hideDialog", "errorDialog");
    if (IsRecipeDialog)
        {
        await Js.InvokeVoidAsync("hideDialog", "newRecipeDialog");
        }
    else
        {
        await Js.InvokeVoidAsync("hideDialog", "newIngredientDialog");
        } 
    }

    // Success message methods
    private async void SuccessMessage()
    {
        await Js.InvokeVoidAsync("showDialog", "successDialog");
        await Task.Delay(2000);
        await Js.InvokeVoidAsync("hideDialog", "successDialog");
    }

    // Common properties and methods
    private Dictionary<string, bool> FieldErrors = new()
    {
        { "ingredientName", false },
        { "ingredientType", false },
        { "ingredientCalories", false },
        { "recipeName", false },
        { "recipeDescription", false },
        { "selectedIngredient", false },
        { "recipeType", false },
        { "recipeAllergen", false }
    };

    private string SearchText { get; set; } = string.Empty;
    private string SelectedType { get; set; } = string.Empty;
    private string SelectedAllergen { get; set; } = string.Empty;

    List<string> Types = new List<string> { "Vegetarian", "Vegan", "Pescetarian", "Meateatrian" };
    List<string> Ingredients = new List<string> { "Pasta", "Minced Meat", "Parmezan" };
    List<string> Allergens = new List<string> { "Gluten", "Peanuts", "Eggs", "Soy" };

    // Modify and Delete Recipe properties and methods
    private int SelectedRecipeId { get; set; }
    private string SelectedRecipeAction { get; set; }
    private string ModifySelectedType { get; set; } = string.Empty;
    private string ModifySelectedAllergen { get; set; } = string.Empty;

    private RecipeModel? EditingRecipe { get; set; } = null;

    private async Task SaveRecipe()
    {
    if (EditingRecipe is null) return;

    if (EditingRecipe.Id == 0)
    {
        EditingRecipe.Id = Recipes.Max(r => r.Id) + 1;
        Recipes.Add(EditingRecipe);
    }
    else
    {
    var existingRecipe = Recipes.FirstOrDefault(r => r.Id == EditingRecipe.Id);
    if (existingRecipe is not null)
        {
            existingRecipe.Title = EditingRecipe.Title;
            existingRecipe.Description = EditingRecipe.Description;
            existingRecipe.Types = EditingRecipe.Types.ToList();
            existingRecipe.Ingredients = EditingRecipe.Ingredients.ToList();
            existingRecipe.Allergens = EditingRecipe.Allergens.ToList();
        }
    }

        EditingRecipe = null;
        await Js.InvokeVoidAsync("hideDialog", "newRecipeDialog");
    }

    private async Task OnRecipeSelected(string action)
    {
        var parts = action.Split(':');
        SelectedRecipeAction = parts[0];
        SelectedRecipeId = int.Parse(parts[1]);

    if (SelectedRecipeAction == "delete")
    {
        await Js.InvokeVoidAsync("showDialog", "deleteRecipeDialog");
    }
    else if (SelectedRecipeAction == "modify")
    {
    var recipe = Recipes.FirstOrDefault(r => r.Id == SelectedRecipeId);
    if (recipe != null)
    {
        NewRecipeName = recipe.Title;
        NewRecipeDescription = recipe.Description;
        NewRecipeIngredients = new List<string>(recipe.Ingredients);
        NewSelectedType = new List<string>(recipe.Types);
        NewSelectedAllergen = new List<string>(recipe.Allergens);
        ModifySelectedType = recipe.Types.FirstOrDefault() ?? string.Empty;
        ModifySelectedAllergen = recipe.Allergens.FirstOrDefault() ?? string.Empty;
    }

        await Js.InvokeVoidAsync("showDialog", "modifyRecipeDialog");
    }
    }

    // Modify Recipe methods
    private async Task SaveModifiedRecipe()
    {
        var recipe = Recipes.FirstOrDefault(r => r.Id == SelectedRecipeId);
        if (recipe != null)
    {
        recipe.Title = NewRecipeName;
        recipe.Description = NewRecipeDescription;
        recipe.Ingredients = new List<string>(NewRecipeIngredients);
        recipe.Types = new List<string> { ModifySelectedType };
        recipe.Allergens = new List<string> { ModifySelectedAllergen };
    }
        await Js.InvokeVoidAsync("hideDialog", "modifyRecipeDialog");
        StateHasChanged();
    }

    private async Task CancelModifyRecipe()
    {
        await Js.InvokeVoidAsync("hideDialog", "modifyRecipeDialog");
    }

    // Delete Recipe methods
    private async Task ConfirmDeleteRecipe()
    {
        var recipeCountBefore = Recipes.Count;
        Recipes.RemoveAll(r => r.Id == SelectedRecipeId);

        var recipeCountAfter = Recipes.Count;
        await Js.InvokeVoidAsync("hideDialog", "deleteRecipeDialog");
    }

    private async Task CancelDeleteRecipe()
    {
        await Js.InvokeVoidAsync("hideDialog", "deleteRecipeDialog");
    }
    private string NewRecipeSelectedType { get; set; } = string.Empty;
    private string NewRecipeSelectedAllergen { get; set; } = string.Empty;

    private void ResetNewRecipeDialog()
    {
        NewRecipeName = string.Empty;
        NewRecipeDescription = string.Empty;
        NewRecipeIngredients.Clear();
        NewRecipeSelectedType = string.Empty;
        NewRecipeSelectedAllergen = string.Empty;
        SelectedIngredient = string.Empty;
    }
}
<script>
    window.showDialog = (dialogId) => {
        document.getElementById(dialogId).showModal();
    };

    window.hideDialog = (dialogId) => {
        document.getElementById(dialogId).close();
    };
</script>