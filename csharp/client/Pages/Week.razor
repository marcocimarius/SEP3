@page "/week"
@inject HttpClient httpClient
@inject IJSRuntime Js
@inject AuthenticationStateProvider authProvider
@using System.Globalization
@using System.Text.Json
@using BlazorApp1.Components
@using DefaultNamespace
@using Google.Protobuf.WellKnownTypes
@using Via.Dk

<AuthorizeView Roles="User">
    <h1 class="text-3xl font-bold mb-6 text-gray-800">Weeks</h1>
    <div class="mb-4">
        <h2 class="text-lg font-semibold text-gray-700">
            Selected Recipes: @string.Join(", ", CurrentSelection.Recipes.Select(r => r.Id) ?? Array.Empty<int>())
        </h2>
        <p class="text-sm text-gray-600">
            (You can select up to 3 recipes)
        </p>
    </div>
    <h3>
        @if (HasWeekPassed || recipes == null || recipes.Count == 0)
        {
            <span class="text-red-500">No recipes found</span>
        }
    </h3>
    <div class="flex gap-3">
        <input type="week"
               class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded focus:ring-indigo-500 focus:border-indigo-500 block p-2.5"
               value="@CurrentWeek"
               onchange="@GetWeek"
        />
        <button
            disabled="@HasWeekPassed"
            onclick="@OnSubmit"
            class="text-white font-medium py-2 px-4 rounded-lg @(recipes != null && recipes.Count == 0 ? "cursor-not-allowed bg-gray-400 text-black" : "bg-blue-600 hover:bg-blue-700")">
            Lock week
        </button>
    </div>
    @if (CurrentSelection.WeekStartDate != null)
    {
        <div class="p-4 bg-green-100 text-green-700 rounded-md mb-6 mt-6">
            <p class="font-medium">Week already selected and locked. ðŸŽ‰</p>
        </div>
    }
    <div class="grid grid-cols-3 gap-4">
        @if (recipes != null && recipes.Count == 0)
        {
            <div class="p-4 bg-red-100 text-red-700 rounded-md mb-6 mt-6">
                <p class="font-medium">No recipes found for this week. ðŸ˜”</p>
            </div>
        }
        @if (recipes != null)
        {
            @foreach (var recipe in recipes)
            {
            <RecipeCard
                @key="recipe.Id"
                ImageUrl="@recipe.ImageLink"
                Title="@recipe.Name"
                Description="@recipe.Description"
                Type="@recipe.Type"
                Ingredients="recipe.Ingredients.Select(i => i.Name).ToList()"
                Id="@recipe.Id"
                Selectable="true"
                OnSelected="OnRecipeSelected"
                IsSelected="@CurrentSelection.Recipes.Select(r => r.Id).Contains(recipe.Id)"
                Disabled="@(HasWeekPassed || CurrentSelection.WeekStartDate != null)"
            />
        }
    }
</div>
<!-- Success Dialog -->
<dialog id="successDialog" class="rounded-lg p-6 bg-white shadow-lg w-1/3">
    <div class="flex flex-col space-y-4">
        <div class="flex justify-between items-center">
            <h3 class="text-xl font-bold">Success</h3>
        </div>
        <p>Week saved and will be delivered soon!</p>
    </div>
</dialog>
</AuthorizeView>


@code {
public string? CurrentWeek { get; set; }
public NormalizedWeek CurrentSelection { get; set; } = new NormalizedWeek();
private bool _hasWeekPassed;

public bool HasWeekPassed
{
    get
    {
        if (CurrentWeek == null) return false;
        var yearWeek = CurrentWeek.Split("-W");
        var startDate = ISOWeek.ToDateTime(int.Parse(yearWeek[0]), int.Parse(yearWeek[1]), DayOfWeek.Monday);
        return startDate < DateTime.Now;
    }
    set { this._hasWeekPassed = value; }
}

List<Via.Dk.Recipe>? recipes = null;

public async Task GetWeek(ChangeEventArgs e)
{
    CurrentWeek = e.Value?.ToString();
    var yearWeek = CurrentWeek.Split("-W");
    var startDate = ISOWeek.ToDateTime(int.Parse(yearWeek[0]), int.Parse(yearWeek[1]), DayOfWeek.Monday);
    var endDate = ISOWeek.ToDateTime(int.Parse(yearWeek[0]), int.Parse(yearWeek[1]), DayOfWeek.Sunday);
    try
    {
        var content = await httpClient.GetStringAsync("api/AdminWeek?weekStartDate=" + startDate.ToString("o") + "&weekEndDate=" + endDate.ToString("o"));
        var res = JsonSerializer.Deserialize<List<NormalizedWeek>>(content, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        });
        this.recipes = new List<Via.Dk.Recipe>(res[0].Recipes.ToArray());
    }
    catch (Exception ex)
    {
        this.recipes = new List<Via.Dk.Recipe>();
        this.CurrentSelection.WeekStartDate = null;
        Console.WriteLine(ex);
        throw;
    }

    try
    {
        var auth = await authProvider.GetAuthenticationStateAsync();
        var userId = int.Parse(auth.User.Claims.First(c => String.Equals(c.Type, "Id")).Value);
        var contentSelection = await httpClient.GetStringAsync("api/Selection?weekStartDate=" + startDate.ToString("o") + "&weekEndDate=" + endDate.ToString("o") + "&createdById=" + userId);
        var resSelection = JsonSerializer.Deserialize<List<Via.Dk.Recipe>>(contentSelection, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        });
        CurrentSelection.Recipes.Clear();
        if (resSelection != null) CurrentSelection.Recipes.AddRange(resSelection);
        Console.WriteLine(CurrentSelection.WeekStartDate == null);
        CurrentSelection.WeekStartDate = startDate.ToUniversalTime().ToTimestamp();
        CurrentSelection.WeekEndDate = endDate.ToUniversalTime().ToTimestamp();
        StateHasChanged();
    }
    catch (Exception ex)
    {
        StateHasChanged();
        Console.WriteLine(ex);
    }
}

private async Task SuccessMessage()
{
    await Js.InvokeVoidAsync("showDialog", "successDialog");
    await Task.Delay(2000);
    await Js.InvokeVoidAsync("hideDialog", "successDialog");
}

public async Task OnSubmit()
{
    var yearWeek = CurrentWeek.Split("-W");
    var startDate = ISOWeek.ToDateTime(int.Parse(yearWeek[0]), int.Parse(yearWeek[1]), DayOfWeek.Monday);
    var endDate = ISOWeek.ToDateTime(int.Parse(yearWeek[0]), int.Parse(yearWeek[1]), DayOfWeek.Sunday);
    var adminWeeks = await httpClient.GetFromJsonAsync<List<NormalizedAdminWeek>>("api/AdminWeek?weekStartDate=" + startDate.ToUniversalTime().ToString("o") + "&weekEndDate=" + endDate.ToUniversalTime().ToString("o"));
    var adminWeek = adminWeeks?[0];
    if (adminWeek == null)
    {
        return;
    }

    this.recipes = new List<Via.Dk.Recipe>(adminWeek.Recipes);
    var selection = new CreateSelectionRequest
    {
        AdminWeekId = adminWeek.Id,
    };
    selection.AdminWeekRecipesId.AddRange(this.CurrentSelection?.Recipes.Select(r => r.Id));

    var auth = await authProvider.GetAuthenticationStateAsync();
    var userId = int.Parse(auth.User.Claims.First(c => String.Equals(c.Type, "Id")).Value);
    selection.CreatedById = userId;
    if (CurrentSelection?.WeekStartDate == null)
    {
        await httpClient.PostAsJsonAsync("api/Selection", selection);
        CurrentSelection.WeekStartDate = startDate.ToUniversalTime().ToTimestamp();
        await SuccessMessage();
    }
}

private void OnRecipeSelected(string id)
{
    var list = this.recipes;
    if (list != null && CurrentSelection.Recipes.Select(r => r.Id).Contains(list.First(r => r.Id == int.Parse(id)).Id))
    {
        // If the recipe is already selected, remove it
        Console.WriteLine(CurrentSelection.Recipes.Count);
        CurrentSelection.Recipes.Remove(list.First(r => r.Id == int.Parse(id)));
    }
    else
    {
        // Add recipe only if the limit is not reached 3
        if (CurrentSelection?.Recipes.Count < 3)
        {
            CurrentSelection?.Recipes.Add(list.First(r => r.Id == int.Parse(id)));
        }
    }
}

}

<script>
    window.showDialog = (dialogId) => {
        document.getElementById(dialogId).showModal();
    };

    window.hideDialog = (dialogId) => {
        document.getElementById(dialogId).close();
    };
</script>
